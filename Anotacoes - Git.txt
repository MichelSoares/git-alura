conta GitHub

michel_soares@outlook.com
mitzero0


Curso Git: Trabalho em Equipe com Controle e Segurança

Git: É uma tecnologia de versiornamento de dados usado para facilitar, por exemplo, o desenvolvimento
de um projeto de software onde por sua vez temos diversas pessoas trabalhando em equipe, muitas vezes
alterando um mesmo arquivo simultâneamente. Com o uso correto do Git temos a certeza que as partes do projeto
desenvolvidas por cada pessoa da equipe integra-se entre si fazendo que cada integrante da equipe tenha sempre
uma versão atualizada do arquivo. 


Instalação do GIT -  

Muito simples instalar!


O git fornece um repositorio de codigo fonte na web grátis para projetos publicos (GitHub),
ou seja, o GitHub é uma plataforma online de repositorios;


INTEGRAÇÃO COM GITHUB:

Depois de criada nossa conta no GitHub, precisamos gerar uma senha (chave de segurança) que será responsável por identificar 
nossa máquina quando fizermos as interações entre nosso projeto e o serviço do Github. Caso não exista essa configuração 
entre nossa máquina e a conta do Github, o acesso ao serviço pelos comandos do Git será negado.

No Windows (Git Bash)

ssh-keygen -t rsa -C "seu_email@hotmail.com"


com esse comando geramos nossa chave publica/privada para realizamos operações especificas no GitHub.


Enter- para não alterarmos o local que o mesmo salvará a chaves (geralmente salvo no diretorio com nome do Usuario na pasta .ssh)
Enter- para não atribuimos uma senha para abrir nossa chave public/private.


Agora no site do GitHub em Settings> SSH keys> ADD SSH key> title (titulo da chave) abaixo a chave propriamente dito (id_rsa.pub).









************************C R I A N D O   E   I N T E R A G I N D O   C O M   R E P O S I T O R I O   R E M O T O*********************************






Um repositório remoto nada mais é do que um "espelho" do nosso repositorio local.

Quando executamos o comando git init - estamos inicializando um repositório em determinado diretorio, porem
a principio ele é somente LOCAL.

COMO INTERAGIR COM UM REPOSITORIO REMOTO:


1) criamos um novo repositorio no GITHUB por padrão com o mesmo nome do projeto.

copiamos um endereço HTTP.

2) No GitBash - 

	git remote add <exemplo-repositorio>  https://github.com/MichelSoares/git-alura.git - esse comando serve para integrar repositorio locais
	com um repositorio remoto.

3) Mandando as alterações dos meus COMMIT'S para o repositorio remoto:
	
	git push <nome repositorio> <branch>.



Conceitos do BRANCH:


Branch é basicamente uma linha de produção sendo a principal por default a MASTER, onde o sistema está rodando.

Quando trabalhamos em equipe temos diversas pessoas modificando vários arquivos no projeto, muitas vezes
o mesmo arquivo simultâneamente, agora imagine se ambas realiza-se o commit no repositorio em uma BRANCH 
ao mesmo tempo e ainda mais com o sistema em produção, ocorreria um erro! Para evitarmos o ocorrido geralmente
trabalhamos com BRANCH'S secundárias paralela (bifurcação) ao BRANCH principal.


git branch - esse comando mostra as branchs 

git branch nomebranch - criando um Branch.

git checkout nomebranch	- trocando de branch. 


	git checkout -b <nome branch> - esse comando criar e já troca para a branch recé criada.

	git branch -d <nome branch> - deletando uma branch;

	git push -u <nome repositorio> <nome branch> - criando uma branch remota e vinculado-a com a local
						       com o mesmo nome.

	
	git branch -r - esse comando retorna todos as branch's remotas.

	git branch -a - esse comando retorna todas as branch's locais e remotas.

	
	git checkout -t <nome repositorio>/<nome branch> - esse comando executa:
	A criação de uma nova branch local chamada <nome branch> é criada, muda-se para essa branch,
	copiamos todo o conteúdo da branch remota <nome branch> do repositório referente ao <nome repositorio>
	e trackeamos as duas branches.

	
	git push <nome repositorio>:<nome branch> - deletando uma branch remota.

	
	git fetch <nome repositorio> - Verificando as atualizações do repositorio citado.
	


git push <nome repositorio> <branch>: passando minha nova branch local para meu repoditório remoto.

Para evitar tal trabalho, podemos indicar o caminho (track) da branch remota para a nossa branch local.
Isso pode ser feito no instante em que criamos a branch remota através da opção "-u". No nosso caso, temos:

git push -u origin design

	






 



***********************************************C  O  M  A  N  D  O  S************************************************************


git clone git : - Esse comando clone criará uma pasta com o mesmo nome padrão do repositório.


git tag -  Visualizamos todas as tags (versões do software) criadas.


git checkout v0.1 - retornamos a um uma versão anterior do projeto.


git diff v0.1 v0.2 - esse comando permiti visualizar as alterações realizadas da versão v0.1 para v0.2.


git blame <nome_arquivo.extensao> - podemos visualiza quem alterou os arquivo recetemente.


git init - esse comando inicializar um repositorio no diretorio especificado.


git add <file name> - esse comando nos permite adicionar um arquivo para lista do git, de arquivos rastreados,
		      monitorados pelo mesmo.

	podemos adicionar varios arquivos ao mesmo tempo

	sendo:

	git add <file name> <file name> (...)

	ou

	git add *.xhtml

	para todos os arquivos na pasta que tenha o formato .xhtml


	git add nomePasta/

	adicionando todos os arquivos de um diretório especificado.


git commit -m "exemplo" - esse comando cria um commit do nosso projeto. OBS.: sempre é preciso passa uma mensagem para identificação.


git whatchanged - permite verificar quais arquivos foram alterados por cada commit realizado.


git whatchanged -p  - permite visualizar detalhes de todos os arquivos alterados por cada commit realizado.


git remote - esse comando mostra todos os repositorios remotos que possuo no GitHub.


git remote add <exemplo-repositorio>  https://github.com/MichelSoares/git-alura.git - esse comando serve para integrar repositorio locais
com um repositorio remoto.


git push <name repositorio remoto> <name branch>: exemplo - git push origin master - esse comando manda as alterações
realizadas para o repositorio remoto.

 





 














































 




   

